/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateChessboardArgs } from "./CreateChessboardArgs";
import { UpdateChessboardArgs } from "./UpdateChessboardArgs";
import { DeleteChessboardArgs } from "./DeleteChessboardArgs";
import { ChessboardFindManyArgs } from "./ChessboardFindManyArgs";
import { ChessboardFindUniqueArgs } from "./ChessboardFindUniqueArgs";
import { Chessboard } from "./Chessboard";
import { ChessboardService } from "../chessboard.service";

@graphql.Resolver(() => Chessboard)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ChessboardResolverBase {
  constructor(
    protected readonly service: ChessboardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Chessboard",
    action: "read",
    possession: "any",
  })
  async _chessboardsMeta(
    @graphql.Args() args: ChessboardFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Chessboard])
  @nestAccessControl.UseRoles({
    resource: "Chessboard",
    action: "read",
    possession: "any",
  })
  async chessboards(
    @graphql.Args() args: ChessboardFindManyArgs
  ): Promise<Chessboard[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Chessboard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Chessboard",
    action: "read",
    possession: "own",
  })
  async chessboard(
    @graphql.Args() args: ChessboardFindUniqueArgs
  ): Promise<Chessboard | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Chessboard)
  @nestAccessControl.UseRoles({
    resource: "Chessboard",
    action: "create",
    possession: "any",
  })
  async createChessboard(
    @graphql.Args() args: CreateChessboardArgs
  ): Promise<Chessboard> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Chessboard)
  @nestAccessControl.UseRoles({
    resource: "Chessboard",
    action: "update",
    possession: "any",
  })
  async updateChessboard(
    @graphql.Args() args: UpdateChessboardArgs
  ): Promise<Chessboard | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Chessboard)
  @nestAccessControl.UseRoles({
    resource: "Chessboard",
    action: "delete",
    possession: "any",
  })
  async deleteChessboard(
    @graphql.Args() args: DeleteChessboardArgs
  ): Promise<Chessboard | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
